---
- name: Ensure a single EC2 host exists in the default VPC
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    instance_name: "{{ instance_name | default('compose-ec2') }}"
    aws_region: "{{ aws_region | default(lookup('env', 'AWS_REGION') | default('us-west-2')) }}"
    sg_name: "{{ instance_name }}-sg"
    instance_type: t3.micro
  tasks:
    - name: Find default VPC
      amazon.aws.ec2_vpc_net_info:
        filters:
          isDefault: true
        region: "{{ aws_region }}"
      register: vpcs

    - name: Fail if no default VPC
      ansible.builtin.fail:
        msg: "No default VPC found in {{ aws_region }}"
      when: vpcs.vpcs | length == 0

    - name: Pick a public subnet in default VPC
      amazon.aws.ec2_vpc_subnet_info:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ vpcs.vpcs[0].vpc_id }}"
          map-public-ip-on-launch: true
      register: subnets

    - name: Fail if no public subnet
      ansible.builtin.fail:
        msg: "No public subnet in default VPC {{ vpcs.vpcs[0].vpc_id }}"
      when: subnets.subnets | length == 0

    - name: Ensure security group for HTTP/HTTPS/SSH
      amazon.aws.ec2_security_group:
        name: "{{ sg_name }}"
        description: "Security group for {{ instance_name }}"
        vpc_id: "{{ vpcs.vpcs[0].vpc_id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 8080
            to_port: 8080
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: -1
            cidr_ip: 0.0.0.0/0
      register: sg

    # Replace the Fedora lookup with a RHEL 10 Marketplace lookup
    - name: Lookup latest RHEL 10 HVM SSD AMI (x86_64) from Red Hat / AWS Marketplace
      amazon.aws.ec2_ami_info:
        region: "{{ aws_region }}"
        owners:
          - "309956199498"    # Red Hat, Inc.
          - "aws-marketplace" # Include Marketplace-owned images (requires subscription)
        filters:
          name: "RHEL-10*HVM*x86_64*"
          architecture: "x86_64"
          virtualization-type: "hvm"
          root-device-type: "ebs"
          block-device-mapping.volume-type:
            - "gp3"
            - "gp2"
          state: "available"
      register: rhel_ami_info

    - name: Fail if no RHEL 10 AMI found
      ansible.builtin.fail:
        msg: >-
          No RHEL 10 (HVM, SSD) AMI found in {{ aws_region }}.
          If you are not subscribed, go to AWS Marketplace and subscribe to
          "Red Hat Enterprise Linux 10 (HVM), SSD Volume Type", then retry.
      when: rhel_ami_info.images | length == 0

    - name: Pick most recent RHEL 10 AMI by creation date
      ansible.builtin.set_fact:
        rhel_ami: "{{ (rhel_ami_info.images | sort(attribute='creation_date')) | last }}"

    - name: Check for existing instance by Name tag
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ instance_name }}"
          instance-state-name:
            - pending
            - running
            - stopping
            - stopped
      register: existing

    - name: Ensure instance exists and is running
      amazon.aws.ec2_instance:
        name: "{{ instance_name }}"
        region: "{{ aws_region }}"
        instance_type: "{{ instance_type }}"
        image_id: "{{ rhel_ami.image_id }}"
        security_group: "{{ sg.group_id | default(sg.results[0].group_id) }}"
        subnet_id: "{{ subnets.subnets[0].id }}"
        wait: true
        state: running
        network:
          assign_public_ip: true
        tags:
          Name: "{{ instance_name }}"
      when: existing.instances | length == 0

    - name: Start instance if it exists but is stopped
      amazon.aws.ec2_instance:
        region: "{{ aws_region }}"
        state: running
        instance_ids: "{{ existing.instances | map(attribute='instance_id') | list }}"
        wait: true
      when: existing.instances | length > 0 and (existing.instances[0].state.name != 'running')

    - name: Refresh instance facts
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        filters:
          "tag:Name": "{{ instance_name }}"
          instance-state-name:
            - running
      register: running

    - name: Show instance connection details
      ansible.builtin.debug:
        msg:
          instance_id: "{{ running.instances[0].instance_id }}"
          availability_zone: "{{ running.instances[0].placement.availability_zone }}"
          public_dns: "{{ running.instances[0].public_dns_name }}"